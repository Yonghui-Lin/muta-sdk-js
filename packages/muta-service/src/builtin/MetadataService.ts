// generated by muta-codegen, please do not edit manually
// @ts-nocheck
/* eslint-disable */

import { Address, Hash, Hex, U32, U64 } from '@mutajs/types';
import { createBindingClass, query, mutation } from "@mutajs/service";
export type Maybe<T> = T | null;

export const MetadataService = createBindingClass(
  'metadata',
  {
    get_metadata: query<null, Metadata>(),
  },
  {

  }
);

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Address: Address;
  Hash: Hash;
  Hex: Hex;
  U32: U32;
  U64: U64;
};

export type Query = {
  get_metadata: Metadata;
};




export type Metadata = {
  chain_id: Scalars['Hash'];
  common_ref: Scalars['Hex'];
  timeout_gap: Scalars['U64'];
  cycles_limit: Scalars['U64'];
  cycles_price: Scalars['U64'];
  interval: Scalars['U64'];
  verifier_list: Array<ValidatorExtend>;
  prevote_ratio: Scalars['U64'];
  precommit_ratio: Scalars['U64'];
  propose_ratio: Scalars['U64'];
  brake_ratio: Scalars['U64'];
  tx_num_limit: Scalars['U64'];
  max_tx_size: Scalars['U64'];
};



export type ValidatorExtend = {
  bls_pub_key: Scalars['Hex'];
  address: Scalars['Address'];
  propose_weight: Scalars['U32'];
  vote_weight: Scalars['U32'];
};
